name: Documentation Validation

on:
  pull_request:
    paths:
      - 'src/**'
      - 'docs/**'
      - 'README.md'
      - 'CONTRIBUTING.md'
      - 'package.json'
  workflow_dispatch:

permissions:
  pull-requests: write
  contents: read

jobs:
  validate-docs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install documentation dependencies
        run: npm install --save-dev typedoc typedoc-plugin-markdown
        
      - name: Generate documentation
        id: generate
        run: |
          npm run docs:generate
          echo "exit_code=$?" >> $GITHUB_OUTPUT
        continue-on-error: true
        
      - name: Check documentation status
        id: status
        run: |
          STATUS_OUTPUT=$(npm run docs:status:json --silent)
          echo "status<<EOF" >> $GITHUB_OUTPUT
          echo "$STATUS_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Extract health score
          HEALTH_SCORE=$(echo "$STATUS_OUTPUT" | jq -r '.healthScore // 0')
          echo "health_score=$HEALTH_SCORE" >> $GITHUB_OUTPUT
        continue-on-error: true
        
      - name: Upload documentation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-report
          path: |
            docs-report.json
            docs-report.md
            
      - name: Comment PR with documentation status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the report
            let report;
            try {
              const reportContent = fs.readFileSync('docs-report.md', 'utf8');
              report = reportContent;
            } catch (error) {
              report = '‚ùå Failed to generate documentation report';
            }
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Documentation Generation Report')
            );
            
            const commentBody = `## üìö Documentation Validation Report\n\n${report}\n\n---\n<sub>Generated by Documentation Validation workflow</sub>`;
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
            
      - name: Check documentation health
        run: |
          HEALTH_SCORE=${{ steps.status.outputs.health_score }}
          if [ "$HEALTH_SCORE" -lt "70" ]; then
            echo "‚ùå Documentation health score is too low: $HEALTH_SCORE/100"
            echo "Please fix the issues reported above before merging."
            exit 1
          else
            echo "‚úÖ Documentation health score: $HEALTH_SCORE/100"
          fi