#!/usr/bin/env node

import { readFile, writeFile, readdir, stat } from 'fs/promises';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = join(__dirname, '..');
const apiDir = join(projectRoot, 'docs', 'api');

/**
 * Fix malformed markdown links generated by TypeDoc
 * TypeDoc sometimes generates links like [`method`](Class.md#method()
 * which are missing the closing parenthesis in the link syntax
 */
async function fixMalformedMarkdownLinks(filePath) {
  const content = await readFile(filePath, 'utf-8');
  let modified = false;
  let fixedContent = content;

  // Fix malformed markdown links that are missing closing parenthesis
  // Pattern: [`text`](file.md#anchor() or [`text`](file.md#anchor?)
  const malformedLinkRegex = /\[`([^`]+)`\]\(([^)]+\.md#[^)]+\(\)|[^)]+\.md#[^)]+\?)\s*$/gm;

  fixedContent = fixedContent.replace(malformedLinkRegex, (match, text, link) => {
    modified = true;
    return `[\`${text}\`](${link})`;
  });

  // Also fix links that have anchors with parentheses but correct markdown syntax
  // This ensures consistency in anchor format
  const methodLinkRegex = /\[`([^`]+)`\]\(([^)]+\.md)#([a-zA-Z]+)\b\)/g;

  fixedContent = fixedContent.replace(methodLinkRegex, (match, text, file, method) => {
    // Only add parentheses if the method name doesn't already have them
    // and it's not followed by a question mark
    if (!match.includes('#' + method + '()') && !match.includes('#' + method + '?')) {
      modified = true;
      return `[\`${text}\`](${file}#${method}())`;
    }
    return match;
  });

  if (modified) {
    await writeFile(filePath, fixedContent);
    return true;
  }
  return false;
}

/**
 * Recursively process all markdown files in a directory
 */
async function processDirectory(dir) {
  const entries = await readdir(dir, { withFileTypes: true });
  let filesFixed = 0;

  for (const entry of entries) {
    const fullPath = join(dir, entry.name);

    if (entry.isDirectory()) {
      filesFixed += await processDirectory(fullPath);
    } else if (entry.isFile() && entry.name.endsWith('.md')) {
      const fixed = await fixMalformedMarkdownLinks(fullPath);
      if (fixed) {
        console.log(`Fixed malformed links in ${fullPath}`);
        filesFixed++;
      }
    }
  }

  return filesFixed;
}

export async function fixTypeDocMarkdown() {
  console.log('Fixing TypeDoc-generated markdown files...');

  try {
    const filesFixed = await processDirectory(apiDir);
    console.log(`Fixed ${filesFixed} files with malformed markdown links`);
    return { success: true, filesFixed };
  } catch (error) {
    console.error('Error fixing TypeDoc markdown:', error.message);
    return { success: false, error: error.message };
  }
}

// Run if called directly
if (process.argv[1] === fileURLToPath(import.meta.url)) {
  fixTypeDocMarkdown().catch(console.error);
}
